{
  "version": "1.11.0",
  "compound": {
    "kind": "class",
    "id": "classgropoint",
    "name": "gropoint",
    "url_base": "classgropoint",
    "url": "classgropoint.html",
    "include": [
      "&lt;src/GroPointModbus.h&gt;",
      "_gro_point_modbus_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The Main Class.",
    "description": "<p>This is the class for communication with GroPoint sensors via modbus.</p>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "modules": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [
      {
        "base_url": "classgropoint.html",
        "id": "a20b949a555d5ec9a9d45a09f1cecb6d5",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "begin",
        "brief": "This function sets up the communication.",
        "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this.</p>",
        "return_value": "True if the starting communication was successful, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "model",
            "type": "<a href=\"_gro_point_modbus_8h.html#a2eee1f9b124a42a2507ad3bdb246d09d\" class=\"m-doc\">gropointModel</a>",
            "type_name": "<a href=\"_gro_point_modbus_8h.html#a2eee1f9b124a42a2507ad3bdb246d09d\" class=\"m-doc\">gropointModel</a> model",
            "default": null,
            "description": "The model of the GroPoint sensor, from <a href=\"_gro_point_modbus_8h.html#a2eee1f9b124a42a2507ad3bdb246d09d\" class=\"m-doc\">gropointModel</a>",
            "direction": ""
          },
          {
            "name": "modbusSlaveID",
            "type": "byte",
            "type_name": "byte modbusSlaveID",
            "default": null,
            "description": "The byte identifier of the modbus slave device.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream*",
            "type_name": "Stream* stream",
            "default": null,
            "description": "A pointer to the Arduino stream object to communicate with.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int",
            "type_name": "int enablePin",
            "default": "-1",
            "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classgropoint.html",
        "id": "aa7d6a50b333a23278ea33631b2ca9b8d",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "begin",
        "brief": "This function sets up the communication.",
        "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this.</p>",
        "return_value": "True if the starting communication was successful, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "model",
            "type": "<a href=\"_gro_point_modbus_8h.html#a2eee1f9b124a42a2507ad3bdb246d09d\" class=\"m-doc\">gropointModel</a>",
            "type_name": "<a href=\"_gro_point_modbus_8h.html#a2eee1f9b124a42a2507ad3bdb246d09d\" class=\"m-doc\">gropointModel</a> model",
            "default": null,
            "description": "The model of the GroPoint sensor, from <a href=\"_gro_point_modbus_8h.html#a2eee1f9b124a42a2507ad3bdb246d09d\" class=\"m-doc\">gropointModel</a>",
            "direction": ""
          },
          {
            "name": "modbusSlaveID",
            "type": "byte",
            "type_name": "byte modbusSlaveID",
            "default": null,
            "description": "The byte identifier of the modbus slave device.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream&amp;",
            "type_name": "Stream&amp; stream",
            "default": null,
            "description": "A reference to the Arduino stream object to communicate with.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int",
            "type_name": "int enablePin",
            "default": "-1",
            "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Functions to get and set sensor addresses and metadata",
        "id": "functions-to-get-and-set-sensor-addresses-and-metadata",
        "description": "<p><a name=\"metadata_fxns\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "afeca5b0625db0120bb011c7559b0612c",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getModel",
              "brief": "Returns a pretty string with the model information.",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only based on the model input from the &quot;begin&quot; fxn. The sensor itself does not return its model information.</p></aside>",
              "return_value": "The GroPoint sensor model",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a8d682bbf3d559a081c39c76e14154923",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getParameter",
              "brief": "Returns a pretty string with the parameters measured by group 0 (soil moisture).",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only based on the model input from the &quot;begin&quot; fxn. The sensor itself does not return this information.</p></aside>",
              "return_value": "The primary parameter being measured on this GroPoint sensor model.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a121f6e618e71c7c1fda859ab1b5d16bd",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getParameter1",
              "brief": "Returns a pretty string with the parameters measured by group 1 (temperature).",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only based on the model input from the &quot;begin&quot; fxn. The sensor itself does not return this information.</p></aside>",
              "return_value": "The secondary parameter being measured on this GroPoint sensor model.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a2349180baaaca93bcc62064ab9b4e46d",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getUnits",
              "brief": "Returns a pretty string with the measurement units for parameter group 0 (soil moisture).",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only based on the model input from the &quot;begin&quot; fxn. The sensor itself does not return this information.</p></aside>",
              "return_value": "The units of primary parameter being measured on this GroPoint sensor model.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a6c10f6ef967526e46bc1d1d98bf8397b",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getUnits1",
              "brief": "Returns a pretty string with the measurement units for parameter group 1 (temperature).",
              "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>This is only based on the model input from the &quot;begin&quot; fxn. The sensor itself does not return this information.</p></aside>",
              "return_value": "The units of secondary parameter being measured on this GroPoint sensor model.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a70a3b18c123f266200582eda9b2285f1",
              "include": null,
              "has_details": true,
              "type": "byte",
              "name": "getSensorAddress",
              "brief": "Gets the modbus sensor (slave) address.",
              "description": "<p>The address is in holding register 40201, decimal offset 200 (hexadecimal 0x00C8).</p><p>Does not seem to work with a broadcast address of 0x00 or 0xFF</p>",
              "return_value": "The slave ID of the GroPoint sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "adc1ef07b9f4b75c3fb394a6c12a4288e",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setSensorAddress",
              "brief": "Set a new modbus sensor (slave) address.",
              "description": "<p>The address is in holding register 40201, decimal offset 200 (hexadecimal 0x00C8).</p><p>The address change will take effect immediately, so any subsequent commands must use the new address.</p><p>This register cannot be updated using the broadcast address.</p>",
              "return_value": "True if the slave ID was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newSensorAddress",
                  "type": "byte",
                  "type_name": "byte newSensorAddress",
                  "default": null,
                  "description": "The new address (slave ID) for the GroPoint sensor",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "ab27727c274695d0f2a065c3847123d6e",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "name": "getSensorBaud",
              "brief": "Get the sensor modbus baud rate.",
              "description": "<p>The baud rate is in holding register 40203, decimal offset 202 (hexadecimal 0x00CA)</p><p>The factory default value is 0, corresponding to a baud rate of 19200.</p><p>Valid values: 0=19200, 1=9600, 2=4800, 3=2400, 4=1200, 5=600, 6=300.</p>",
              "return_value": "A code for the baud rate",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a27200fd2c25ee9c498dd77ca0fbdefae",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setSensorBaud",
              "brief": "Set the sensor modbus baud.",
              "description": "<p>The baud rate is in holding register 40203, decimal offset 202 (hexadecimal 0x00CA)</p><p>Change this value to any of the following valid values: 19200, 9600, 4800, 2400, 1200, 600, 300.</p><p>The new baud rate <strong>does not take effect</strong> until the sensor is power cycled, or if the restart communications diagnostic command (08, with subfunction 01) is received.</p>",
              "return_value": "True if the baud rate was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newSensorBaud",
                  "type": "int32_t",
                  "type_name": "int32_t newSensorBaud",
                  "default": null,
                  "description": "The new baud rate to use",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a915f9e081d071e3c9fda8b28f6dc4aab",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getSensorParity",
              "brief": "Get the Sensor modbus serial parity.",
              "description": "<p>The parity is in holding register 40204, decimal offset 0203 (hexadecimal 0x00CB).</p><p>The factory default value is 2 corresponding to Even parity.</p>",
              "return_value": "The parity configuration",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "ab3462ca9257436e7bf0bc4a436cc6d95",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setSensorParity",
              "brief": "Set the sensor modbus serial parity.",
              "description": "<p>The parity is in holding register 40204, decimal offset 0203 (hexadecimal 0x00CB).</p><p>Change this value to any of the following valid values: &quot;None&quot;, &quot;Odd&quot;, &quot;Even&quot;.</p><p>The new parity setting <strong>does not take effect</strong> until the sensor is power cycled, or if the restart communications diagnostic command (08, with subfunction 01) is received.</p>",
              "return_value": "True if the parity was successfully set, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "newSensorParity",
                  "type": "String",
                  "type_name": "String newSensorParity",
                  "default": null,
                  "description": "the new parity, &quot;None&quot;, &quot;Odd&quot;, or &quot;Even&quot;",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "aaa2b0164bbfc8c05f2cac7b6a0983a5c",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getSensorInfo",
              "brief": "Get the sensor information as a String.",
              "description": "<p>Page 35 of GroPoint Profile User Manual says: Function 17 (0x11) returns the ASCII encoded string</p>",
              "return_value": "The sensor information in the format \u2018RIOTTECHGPLPTC vvvSNnnnnnn\u2019 where vvv is the firmware version (v.v.v) and nnnnnn is the probe serial number.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "aa9f63de5ef0b8fc6e38350aea13c9cac",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "getSerialNumber",
              "brief": "Gets the instrument serial number as a String.",
              "description": "<p>This is pulled as a substring from the sensor information.</p>",
              "return_value": "The serial number of the GroPoint sensor",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a937f1170c969d00cd323a50dc688ecd8",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getVersion",
              "brief": "Gets the hardware and software version of the sensor.",
              "description": "<p>This is pulled as a substring from the sensor information.</p>",
              "return_value": "True if the hardware and software versions were successfully updated, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "hardwareVersion",
                  "type": "String&amp;",
                  "type_name": "String&amp; hardwareVersion",
                  "default": null,
                  "description": "A reference to a String object to be modified with the hardware version.",
                  "direction": ""
                },
                {
                  "name": "softwareVersion",
                  "type": "String&amp;",
                  "type_name": "String&amp; softwareVersion",
                  "default": null,
                  "description": "A reference to a String object to be modified with the software version.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a0e45c09ce288c524ec35c33e3b75cbdf",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "restartCommunications",
              "brief": "Restarts communication with the sensor using the modbus diagnostic command 08 (0x08) with subfunction 01.",
              "description": "<p>A request data field contents of FF 00 hex causes the port\u2019s Communications Event Log to be cleared also. Contents of 00 00 leave the log as it was prior to the restart.</p>",
              "return_value": "True if the commuication was restarted, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to start and stop measurements",
        "id": "functions-to-start-and-stop-measurements",
        "description": "<p><a name=\"measurement_fxns\"></a></p><p>Page 39 of GroPoint Profile User Manual says: A new measurement is triggered by a read request to the input registers (either read single or read multiple). The first read command will initiate the start of a measurement (soil moisture or soil temperature) and will respond to the master with an ACKNOWLEDGE (05) exception response. Moisture measurements take approximately 200 ms per segment. Temperature measurements take approximately 200 ms per sensor. The master should wait for this amount of time to expire before attempting to retrieve the measurement values with another read command.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "ac86cfa0217fd8aad6efe806d8fd82bd4",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "startMeasurement",
              "brief": "Tells the sensors to begin taking measurements.",
              "description": "<p>A start command is not in the GroPoint Modbus Manuals. However, Start/Stop functions are required to get these to work in ModularSensors. Instead, just confirm that sensor in communicating with a <a href=\"classgropoint.html#a70a3b18c123f266200582eda9b2285f1\" class=\"m-doc\">gropoint::<wbr />getSensorAddress()</a> command</p>",
              "return_value": "True if the measurements were successfully started, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a7022baf71569ca7579dc116a1fa5db2e",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "stopMeasurement",
              "brief": "Tells the sensors to stop taking measurements.",
              "description": "<p>A stop command is not in the GroPoint Modbus Manuals; always returns true.</p>",
              "return_value": "True if the measurements were successfully started, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Functions to get one or more values from a sensor.",
        "id": "functions-to-get-one-or-more-values-from-a-sensor",
        "description": "<p><a name=\"value_fetching\"></a></p><p>Based off modbusMaster::getRegisters(), but with trigger followed by a 200 ms delay before read request</p><p>Page 39 of GroPoint Profile User Manual says: A new measurement is triggered by a read request to the input registers (either read single or read multiple). The first read command will initiate the start of a measurement (soil moisture or soil temperature) and will respond to the master with an ACKNOWLEDGE (05) exception response. Moisture measurements take approximately 200 ms per segment. Temperature measurements take approximately 200 ms per sensor. The master should wait for this amount of time to expire before attempting to retrieve the measurement values with another read command.</p><p>Page 37-38 of GroPoint Profile User Manual says: The input registers are read-only registers containing soil moisture or temperature measurement values. Moisture and temperature readings are stored as 16-bit signed integers and will be returned without a decimal place. In order to obtain the true result, the decimal place setting must be applied. The default setting for this is 1 decimal place, so for example a decimal value of 123 indicates 12.3 % volumetric moisture content for volumetric soil moisture measurements, or 12.3 \u00b0C for the soil temperature sensor measurements.</p>",
        "members": [
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a784a13e20f657e003dce794d219634f7",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getInputRegisters",
              "brief": "Get read-only input registers containing measured values.",
              "description": "<p>Similar to modbusMaster::getRegisters(), but with a trigger request followed by a 200 ms delay before the read measurement request</p><aside class=\"m-note m-default\"><h4>See also</h4><p>value_fetching</p></aside>",
              "return_value": "True if the registers were read successfully, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "startRegister",
                  "type": "int16_t",
                  "type_name": "int16_t startRegister",
                  "default": null,
                  "description": "The first register to read.",
                  "direction": ""
                },
                {
                  "name": "numRegisters",
                  "type": "int16_t",
                  "type_name": "int16_t numRegisters",
                  "default": null,
                  "description": "The total number of registers to read",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a9d8309cb732690236e1bc87651d282ff",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getValues",
              "brief": "Gets parameter group 0 (soil moisture) values back from the sensor.",
              "description": "<p>Values starting at input register 30001, decimal offset 0 (hexadecimal 0x0000)</p><aside class=\"m-note m-default\"><h4>See also</h4><p>value_fetching</p></aside>",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "valueM1",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueM1",
                  "default": null,
                  "description": "The first value from parameter group 0 (soil moisture)",
                  "direction": ""
                },
                {
                  "name": "valueM2",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueM2",
                  "default": null,
                  "description": "The second value from parameter group 0 (soil moisture)",
                  "direction": ""
                },
                {
                  "name": "valueM3",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueM3",
                  "default": null,
                  "description": "The third value from parameter group 0 (soil moisture)",
                  "direction": ""
                },
                {
                  "name": "valueM4",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueM4",
                  "default": null,
                  "description": "The fourth value from parameter group 0 (soil moisture)",
                  "direction": ""
                },
                {
                  "name": "valueM5",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueM5",
                  "default": null,
                  "description": "The fifth value from parameter group 0 (soil moisture)",
                  "direction": ""
                },
                {
                  "name": "valueM6",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueM6",
                  "default": null,
                  "description": "The sixth value from parameter group 0 (soil moisture)",
                  "direction": ""
                },
                {
                  "name": "valueM7",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueM7",
                  "default": null,
                  "description": "The seventh value from parameter group 0 (soil moisture)",
                  "direction": ""
                },
                {
                  "name": "valueM8",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueM8",
                  "default": null,
                  "description": "The eighth value from parameter group 0 (soil moisture)",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "a9e985d312cec8bc471c2e779e62ef267",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "getTemperatureValues",
              "brief": "Gets parameter group 1 (temperature) values back from the sensor.",
              "description": "",
              "return_value": "True if the measurements were successfully obtained, false if not.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "valueT1",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT1",
                  "default": null,
                  "description": "The first value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT2",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT2",
                  "default": null,
                  "description": "The second value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT3",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT3",
                  "default": null,
                  "description": "The third value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT4",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT4",
                  "default": null,
                  "description": "The fourth value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT5",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT5",
                  "default": null,
                  "description": "The fifth value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT6",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT6",
                  "default": null,
                  "description": "The sixth value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT7",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT7",
                  "default": null,
                  "description": "The seventh value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT8",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT8",
                  "default": null,
                  "description": "The eighth value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT9",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT9",
                  "default": null,
                  "description": "The ninth value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT10",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT10",
                  "default": null,
                  "description": "The tenth value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT11",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT11",
                  "default": null,
                  "description": "The eleventh value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT12",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT12",
                  "default": null,
                  "description": "The twelvth value from parameter group 1 (temperature)",
                  "direction": ""
                },
                {
                  "name": "valueT13",
                  "type": "float&amp;",
                  "type_name": "float&amp; valueT13",
                  "default": null,
                  "description": "The thirteenth value from parameter group 1 (temperature)",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Debugging functions",
        "id": "debugging-functions",
        "description": "<p><a name=\"debugging\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "ab8b59f3c24b6c066859f4305d0e3dae2",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream*",
                  "type_name": "Stream* stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "ac7b73f7eef0cfea30202242ef10dbb03",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDebugStream",
              "brief": "Set a stream for debugging information to go to.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "stream",
                  "type": "Stream&amp;",
                  "type_name": "Stream&amp; stream",
                  "default": null,
                  "description": "An Arduino stream object",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "classgropoint.html",
              "id": "aed3c9d5122e407e1414cea479f096b73",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "stopDebugging",
              "brief": "Un-set the stream for debugging information to go to; stop debugging.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": [
                {
                  "name": "",
                  "type": "void",
                  "type_name": "void",
                  "default": null,
                  "description": "",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      }
    ],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "gropoint",
        "classgropoint.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "gropoint",
        "classgropoint.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "gropoint::<wbr />"
  }
}